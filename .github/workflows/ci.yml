name: ci
on:
  pull_request:
  push:
    branches:
    - main
  schedule:
  - cron: '00 01 * * *'
jobs:
  test:
    name: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build:
        - pinned
        - pinned-win
        - stable
        - macos
        # - win-msvc
        - win-gnu
        include:
        - build: pinned
          os: ubuntu-18.04
          rust: 1.58.1
        - build: pinned-win
          os: windows-2019
          rust: 1.58.1
        - build: stable
          os: ubuntu-18.04
          rust: stable
        - build: macos
          os: macos-latest
          rust: stable
        # - build: win-msvc
        #   os: windows-2019
        #   rust: stable
        - build: win-gnu
          os: windows-2019
          rust: stable-x86_64-gnu
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true

    - name: Build and test
      run: cargo build --verbose

    - if: startsWith(matrix.build, 'pinned-') == false
      run: cargo test --verbose

    - if: matrix.build == 'nightly'
      run: |
        set -x
        cargo generate-lockfile -Z minimal-versions
        cargo build --verbose
        cargo test --verbose

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal
        components: rustfmt
    - name: Check formatting
      run: |
        cargo fmt --all -- --check

  clippy:
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: clippy
    - name: Run analysis
      run: cargo clippy --all-targets -- -D warnings

  docs:
    name: Docs
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Check documentation
        env:
          RUSTDOCFLAGS: -D warnings
        run: cargo doc --no-deps --document-private-items --workspace
