# input for CI
# https://github.com/ClementTsang/bottom/blob/master/.github/workflows/ci.yml
# https://github.com/heim-rs/heim/blob/master/.github/workflows/ci.yml
# https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/ci.yml

name: ci

on:
  pull_request:
  push:
    branches:
    - main
  schedule:
  - cron: '00 01 * * *'

jobs:

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal
        components: rustfmt
    - run: cargo fmt --all -- --check

  clippy:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: clippy
    - run: cargo clippy --all-targets --workspace -- -D warnings

  build_and_test:
    name: ${{ matrix.toolchain }} / ${{ matrix.tuple.target }}
    needs: [rustfmt, clippy]
    runs-on: ${{ matrix.tuple.os }}
    strategy:
      fail-fast: false
      matrix:
        tuple:
          - { build: 'ubuntu-pinned',  os: 'ubuntu-18.04',   target: 'x86_64-unknown-linux-gnu',      cross: false, rust: 1.58.1 }
          - { build: 'windows-pinned', os: 'windows-2019',   target: 'x86_64-pc-windows-msvc',        cross: false, rust: 1.58.1 }
          - { build: 'ubuntu-latest',  os: 'ubuntu-latest',  target: 'x86_64-unknown-linux-gnu',      cross: false, rust: stable }
          - { build: 'ubuntu-latest',  os: 'ubuntu-latest',  target: 'i686-unknown-linux-gnu',        cross: true,  rust: stable }
          - { build: 'macos-latest',   os: 'macos-latest',   target: 'x86_64-apple-darwin',           cross: false, rust: stable }
          - { build: 'macos-latest',   os: 'macos-latest',   target: 'aarch64-apple-darwin',          cross: true,  rust: stable } # arm
          - { build: 'windows-latest', os: 'windows-latest', target: 'x86_64-pc-windows-msvc',        cross: false, rust: stable }
          - { build: 'windows-latest', os: 'windows-latest', target: 'i686-pc-windows-msvc',          cross: false, rust: stable }
          - { build: 'windows-latest', os: 'windows-latest', target: 'x86_64-pc-windows-gnu',         cross: false, rust: stable }
          - { build: 'ubuntu-latest',  os: 'ubuntu-latest',  target: 'aarch64-unknown-linux-gnu',     cross: true,  rust: stable } # aarch64
          - { build: 'ubuntu-latest',  os: 'ubuntu-latest',  target: 'armv7-unknown-linux-gnueabihf', cross: true,  rust: stable } # armv7
          - { build: 'ubuntu-latest',  os: 'ubuntu-latest',  target: 'arm-unknown-linux-gnueabihf',   cross: true,  rust: stable } # armv6
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.tuple.rust }}
          override: true
          target: ${{ matrix.tuple.target }}
      - name: Check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --verbose --target=${{ matrix.tuple.target }}
          use-cross: ${{ matrix.tuple.cross }}
      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --target=${{ matrix.tuple.target }}
          use-cross: ${{ matrix.tuple.cross }}

  # test:
  #   name: test
  #   needs: [rustfmt, clippy]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       build:
  #       - pinned
  #       - pinned-win
  #       - stable
  #       - macos
  #       # - win-msvc
  #       - win-gnu
  #       include:
  #       - build: pinned
  #         os: ubuntu-18.04
  #         rust: 1.58.1
  #       - build: pinned-win
  #         os: windows-2019
  #         rust: 1.58.1
  #       - build: stable
  #         os: ubuntu-18.04
  #         rust: stable
  #       - build: macos
  #         os: macos-latest
  #         rust: stable
  #       # - build: win-msvc
  #       #   os: windows-2019
  #       #   rust: stable
  #       - build: win-gnu
  #         os: windows-2019
  #         rust: stable-x86_64-gnu
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Install Rust
  #     uses: actions-rs/toolchain@v1
  #     with:
  #       toolchain: ${{ matrix.rust }}
  #       profile: minimal
  #       override: true

  #   - name: Build and test
  #     run: cargo build --verbose

  #   - if: startsWith(matrix.build, 'pinned-') == false
  #     run: cargo test --verbose

  #   - if: matrix.build == 'nightly'
  #     run: |
  #       set -x
  #       cargo generate-lockfile -Z minimal-versions
  #       cargo build --verbose
  #       cargo test --verbose

  docs:
    name: Docs
    needs: [build_and_test]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Check documentation
        env:
          RUSTDOCFLAGS: -D warnings
        run: cargo doc --no-deps --document-private-items --workspace
